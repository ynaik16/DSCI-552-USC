# -*- coding: utf-8 -*-
"""NeuralNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wEiINqu0pQAJDQ3fbQRuMYZ7XhXVUNnR
"""

# from google.colab import files
# uploaded = files.upload()

from zipfile import ZipFile

with ZipFile("/Users/yash/Documents/DSCI 552 (Machine learning/HW5/gestures.zip", 'r') as zip:
    # printing all the contents of the zip file 
    # zip.printdir()

    # extracting all the files 
    print('Extracting all the files now...')
    zip.extractall()
    print('Done!')

import numpy as np
import re

import imageio


def create_data_array(files, sample_size):
    with open(files) as file:
        training_list = file.read().splitlines()
    # print(training_list)

    training_set_size = len(training_list)

    X = np.empty((0, 960), float)

    for sample in training_list[:sample_size]:
        im = imageio.imread(sample) / 255.0
        X = np.vstack((X, im.flatten()))

    Y = np.zeros((training_set_size, 1))
    for i in range(training_set_size):
        if "down" in training_list[i]:
            Y[i] = 1
    Y = Y[:sample_size]
    return X, Y


X_train, y_train = create_data_array("/Users/yash/Documents/DSCI 552 (Machine learning/HW5/downgesture_train.list.txt",
                                     184)
#print(X_train.shape, "\n")
#print(y_train.shape, "\n")

def add_padd(data_X):
    bias = np.ones((data_X.shape[0], 1))  # bias
    X_new = np.hstack((bias, data_X))
    return X_new


def sigmoid(s):
    return (1 / (1 + np.exp(-s)))


def sigmoid_prime(x):
    return sigmoid(x) * (1 - sigmoid(x))


def Neural_Network(data_X, data_Y):
    w1 = np.random.uniform(-1, 2, size=100 * 961)  # weight 1
    w1 = w1.reshape(961, 100)

    w2 = np.random.uniform(-1, 2, size=1 * 101)  # weight 2
    w2 = w2.reshape(101, 1)

    X_biased = np.array([])
    S1 = np.array([])
    S2 = np.array([])

    d1 = np.array([])
    d2 = np.array([])

    sig_s1 = np.array([])
    sig_s2 = np.array([])

#    print("initial weights-\n")
#    print("W1: ", w1)
#    print("W2: ", w2)
#    print("\n")

    for i in range(1000):  # for 1000 epochs
        # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Feed Forward <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        X_biased = add_padd(data_X)
        S1 = np.dot(X_biased, w1)

        sig_s1 = sigmoid(S1)
        sig_s1 = add_padd(sig_s1)

        S2 = np.dot(sig_s1, w2)
        sig_s2 = sigmoid(S2)

        # >>>>>>>>>>>>>>>>>>>>>>>>>>>> Backward Propogation <<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        d2 = (sig_s2 - data_Y) * sigmoid_prime(sig_s2) * 2

        d1 = sigmoid_prime(sig_s1) * np.dot(d2, w2.T)
        d1 = d1[:, 1:]

        z2 = np.dot(sig_s1.T, d2) / d2.shape[0]
        w2 -= 0.1 * z2  # learning rate = 0.1
        z1 = np.dot(X_biased.T, d1) / d1.shape[0]
        w1 -= 0.1 * z1

#    print("Final Weights- \n")
#    print("W1: ", w1)
#    print("W2: ", w2)

    return w1, w2


w1, w2 = Neural_Network(X_train, y_train)


def nn_test(X_test, Y_test, w1, w2):
    X_biased = add_padd(X_test)
    S1 = np.dot(X_biased, w1)
    sig_s1 = sigmoid(S1)
    sig_s1 = add_padd(sig_s1)
    S2 = np.dot(sig_s1, w2)
    sig_s2 = sigmoid(S2)
    prob = sig_s2
    prob = np.round(prob)
    print("\nTrue Labels\n{a}".format(a=Y_test.ravel()))
    print("\nPredict Labels\n{a}".format(a=prob.ravel()))
    acc = (prob == Y_test).sum().astype(float) / len(Y_test)

    return acc


# from google.colab import files
# uploaded = files.upload()

X_test, y_test = create_data_array("/Users/yash/Documents/DSCI 552 (Machine learning/HW5/downgesture_test.list.txt", 83)
print(X_test.shape, "\n")
print(y_test.shape, "\n")

accuracy = nn_test(X_test, y_test, w1, w2)

print("Accuracy of predictions is {:.2%}%".format(accuracy))
